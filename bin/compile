#!/bin/bash

set -e
shopt -s dotglob

basedir="$( cd -P "$( dirname "$0" )" && pwd )"

source "$basedir/../conf/buildpack.conf"

if [ -n "$BUILDPACK_DEBUG" ]; then
    set -x
fi

function fetch_package() {
    local engine="$1"
    local version="$2"
    local location="$3"

    mkdir -p "$location"

    local package="http://${S3_BUCKET}.s3.amazonaws.com/package/${engine}-${version}.tgz"

    curl "$package" -L -s -o - | tar xzf - -C "$location"
}

function indent() {
    c='s/^/       /'
    case $(uname) in
        Darwin) sed -l "$c";;
        *)      sed -u "$c";;
    esac
}

function install_composer_deps() {
    local cwd=$(pwd)
    local target="$1"

    echo "-----> Vendoring Composer"
    {
        mkdir -p "$target/vendor/composer/bin"
        curl -L "http://getcomposer.org/composer.phar" > "$target/vendor/composer/bin/composer.phar"
        chmod a+x "$target/vendor/composer/bin/composer.phar"
    } | indent

    echo "-----> Installing application dependencies with Composer"
    {
        cd "$target"
        "$BUILD_DIR/vendor/php/bin/php" \
            "$target/vendor/composer/bin/composer.phar" install \
            --prefer-dist \
            --optimize-autoloader \
            --no-interaction

        cd "$cwd"
    } | indent
}

function mktmpdir() {
    dir=$(mktemp -t php-$1-XXXX)
    rm -rf $dir
    mkdir -p $dir
    echo $dir
}

function package_document_root() {
    local doc_root=$(jq --raw-output '.extra.heroku["document-root"] // ""' < "$BUILD_DIR/composer.json")
    echo "/app/$doc_root"
}

function package_index_file() {
    jq --raw-output '.extra.heroku["index-document"] // "index.php"' < "$BUILD_DIR/composer.json"
}

function package_framework() {
    jq --raw-output '.extra.heroku.framework // ""' < "$BUILD_DIR/composer.json"
}

function package_nginx_version() {
    jq --raw-output ".extra.heroku.engines.nginx // \"$DEFAULT_NGINX\"" < "$BUILD_DIR/composer.json"
}

function package_php_version() {
    jq --raw-output ".extra.heroku.engines.php // \"$DEFAULT_PHP\"" < "$BUILD_DIR/composer.json"
}

function package_php_config() {
    jq --raw-output '.extra.heroku["php-config"] // [] | .[]' < "$BUILD_DIR/composer.json"
}

function package_compile_cmd() {
    jq --raw-output '.extra.heroku["compile"] // [] | .[]' < "$BUILD_DIR/composer.json"
}

BUILD_DIR="$1"
CACHE_DIR="$2"

cd "$BUILD_DIR"

# Download jq binary for JSON processing
export PATH="$HOME/bin:$PATH"
curl "http://stedolan.github.com/jq/download/linux64/jq" -L -s -o - > "$HOME/bin/jq"
chmod +x "$HOME/bin/jq"

DEFAULT_PHP="5.5.1"
DEFAULT_NGINX="1.4.2"

PHP_VERSION=$(package_php_version)
NGINX_VERSION=$(package_nginx_version)

echo "-----> Vendoring NGINX ${NGINX_VERSION} | PHP ${PHP_VERSION}"

VENDORED_NGINX=$(mktmpdir nginx)
VENDORED_PHP=$(mktmpdir php)

fetch_package nginx "$NGINX_VERSION" "$VENDORED_NGINX"
fetch_package php "$PHP_VERSION" "$VENDORED_PHP"

echo "-----> Vendoring binaries into slug"

[ ! -d "$BUILD_DIR/vendor" ] && mkdir -p "$BUILD_DIR/vendor"

cp -R "$VENDORED_NGINX/" "vendor/nginx"
cp -R "$VENDORED_PHP/" "vendor/php"

# Test that all packages were fetched and extracted successfully
test -d "vendor/nginx"
test -d "vendor/php"

if [ -n "$BUILDPACK_DEBUG" ]; then
    ls -R vendor/nginx
    ls -R vendor/php
fi

mkdir -p "conf"
cp "$basedir/../conf/nginx/base.conf.erb" "conf/nginx.conf.erb"
cp "$basedir/../conf/php/php-fpm.conf" "vendor/php/etc/php-fpm.conf"
cp "$basedir/../conf/php/php.ini" "vendor/php/etc/php.ini"

for conf in $(package_php_config); do
    echo "$conf" >> "vendor/php/etc/php.ini"
done

DETECTED_FRAMEWORK=

for framework in "$basedir/../frameworks/"*; do
    if "$framework" detect "$BUILD_DIR"; then
        "$framework" compile "$BUILD_DIR" "$CACHE_DIR"
        DETECTED_FRAMEWORK="$framework"
    fi
done

if [ -z "$DETECTED_FRAMEWORK" ]; then
    "$basedir/../frameworks/default" compile "$BUILD_DIR" "$CACHE_DIR"
fi

test ! -d ".profile.d" && mkdir -p .profile.d || true

cat > ".profile.d/php.sh" <<SH
export PATH=/sbin:/bin:/usr/sbin:/usr/bin:/app/bin:/app/vendor/nginx/sbin:/app/vendor/php/sbin:/app/vendor/php/bin:/app/vendor/bin:\$PATH
SH

install_composer_deps "$BUILD_DIR"

echo "-----> Running compile commands"
package_compile_cmd | while read cmd; do
    echo "       Running '$cmd'"
    eval $cmd
done

mkdir -p "bin"

cat > "bin/run" <<SH
#!/usr/bin/env bash

for var in \`env | cut -f1 -d=\`; do
    echo "env[\$var] = \\$\${var}" >> /app/vendor/php/etc/php-fpm.conf
done

export DOCUMENT_ROOT="$(package_document_root)"
export INDEX_DOCUMENT="$(package_index_file)"

erb conf/nginx.conf.erb > /app/vendor/nginx/conf/nginx.conf
erb conf/site.conf.erb > /app/vendor/nginx/conf/site.conf

mkdir -p /app/vendor/nginx/logs
mkdir -p /app/vendor/php/var/log
mkdir -p /app/vendor/php/run

touch /app/vendor/nginx/logs/access.log /app/vendor/nginx/logs/error.log
touch /app/vendor/php/var/log/error.log

(tail -f -n 0 /app/vendor/nginx/logs/*.log /app/vendor/php/var/log/*.log &)

php-fpm -p "/app/vendor/php"
nginx -p "/app/vendor/nginx" -c /app/vendor/nginx/conf/nginx.conf
SH

chmod a+x "bin/run"
