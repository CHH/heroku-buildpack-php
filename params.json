{"name":"Heroku-buildpack-php","tagline":"A more advanced PHP buildpack for Heroku, inspired by the Node.js buildpack","body":"# Advanced PHP Heroku Build Pack\r\n\r\n## What makes it unique?\r\n\r\n* Supports PHP 5.3, 5.4 and 5.5\r\n* Uses the memory of the dyno more efficiently by going with NGINX and PHP-FPM instead of Apache/mod_php\r\n* Supports Composer out of the box\r\n* No writing NGINX configuration files: supports CakePHP, Classic PHP applications, Magento, Silex, Slim, Symfony 2 and ZF2 apps with a simple configuration driven by your `composer.json`.\r\n* Zero-Configuration Symfony 2 deployment.\r\n* Dynamic installing of [supported extensions](support/ext) listed as `ext-` requirments in `composer.json`.\r\n\r\n## How to use it\r\n\r\nUse the `--buildpack` parameter when creating a new app:\r\n\r\n    heroku create --buildpack https://github.com/CHH/heroku-buildpack-php myapp\r\n\r\nOr set the `BUILDPACK_URL` config var on an existing app:\r\n\r\n    heroku config:set BUILDPACK_URL=https://github.com/CHH/heroku-buildpack-php\r\n\r\n* * *\r\n\r\nIf you want to be on the bleeding edge and use pre-release features, then use\r\n`git://github.com/CHH/heroku-buildpack-php#development` as buildpack\r\nurl.\r\n\r\n## Stack\r\n\r\n* NGINX 1.4 or 1.5\r\n* PHP 5.3, 5.4 and 5.5, with [ZendOpcache][] and [APCu][] ([Info](https://chh-php-test.herokuapp.com/info))\r\n* PHP-FPM\r\n\r\n[ZendOpcache]: http://pecl.php.net/package/ZendOpcache\r\n[APCu]: http://pecl.php.net/package/apcu\r\n[Available PHP Versions]: http://chh-heroku-buildpack-php.s3.amazonaws.com/manifest.php\r\n[Available NGINX Versions]: http://chh-heroku-buildpack-php.s3.amazonaws.com/manifest.nginx\r\n\r\n## Detection\r\n\r\nThis buildpack detects apps when the app has a `composer.lock` in the\r\napp's root.\r\n\r\nIf an `index.php` is detected in the app's root, then it switches to\r\n\"classic mode\", which means that every \".php\" file is served with PHP,\r\nand the document root is set to the app root.\r\n\r\nWhen a `composer.lock` is detected, then the buildpack does `composer\r\ninstall --no-dev`.\r\n\r\n## Environment\r\n\r\nThis buildpack sets environment variables during compile and runtime:\r\n\r\n* `HEROKU_BUILD_TIME`: Time when the slug was compiled. Format is `%Y%m%d%H%M%S`, e.g. `20131103111548`\r\n\r\nThis buildpack also detects when the app has a node `package.json` in the\r\napp's root. And will install node dependencies like less for example.\r\n\r\n## Frameworks\r\n\r\n### CakePHP\r\n\r\nIs used when the app requires the `pear-pear.cakephp.org/CakePHP` Pear package or when the\r\n`extra.heroku.framework` key is set to `cakephp2` in the `composer.json`. This project assumes the layout given in the [FriendsOfCake/app-template](https://github.com/FriendsOfCake/app-template) composer project.\r\n\r\nOptions:\r\n\r\n* `index-document`: With CakePHP apps, this should be the file where `$Dispatcher->dispatch(new CakeRequest(), new CakeResponse());`\r\n  is called. All requests which don't match an existing file will be forwarded to\r\n  this document.\r\n\r\n### Classic PHP\r\n\r\nThe classic PHP configuration is used as fallback when no framework was detected. It serves every `.php` file relative to the document root.\r\n\r\nThis is also used when an `index.php` file was found in the root of your\r\nproject and no `composer.json`.\r\n\r\n### Magento\r\n\r\nIs used when the `extra.heroku.framework` key is set to `magento` in the `composer.json`.\r\n\r\n### Silex\r\n\r\nIs used when the app requires the `silex/silex` package or when the\r\n`framework` setting is set to `silex` in the `composer.json`.\r\n\r\nOptions:\r\n\r\n* `index-document`: With Silex apps, this should be the file where `$app->run()`\r\n  is called. All requests which don't match an existing file will be forwarded to\r\n  this document.\r\n\r\n### Slim\r\n\r\nIs used when the app requires the `slim/slim` package or when the\r\n`extra.heroku.framework` key is set to `slim` in the `composer.json`.\r\n\r\nOptions:\r\n\r\n* `index-document`: With Slim apps, this should be the file where `$app->run()`\r\n  is called. All requests which don't match an existing file will be forwarded to\r\n  this document.\r\n\r\n### Symfony 2\r\n\r\nIs detected when the app requires the `symfony/symfony` package or when the\r\n`framework` setting is set to `symfony2` in the `composer.json`.\r\n\r\nThis framework preset doesn't need any configuration to work.\r\n\r\nPlease note that if you use config vars in Composer hooks, or in `compile`\r\nscripts, then a new code push may be necessary if you decide to change a config variable.\r\n\r\n## Extensions\r\n\r\nWhen the buildpack encounters `ext-` requirements in your `composer.json`, it will look\r\nup the extension name in the [supported extensions](support/ext) and install them.\r\n\r\nThe version constraint is ignored currently.\r\n\r\nFor example, to install the Sundown extension:\r\n\r\n```\r\n{\r\n    \"require\": {\r\n        \"ext-sundown\": \"*\"\r\n    }\r\n}\r\n```\r\n\r\nNote that the extension requirements defined by dependencies are not taken into account there.\r\nIt must be required by the project itself.\r\n\r\n##Logging\r\n\r\nThis buildpack defines default log files by framework.\r\nIt also defines log files nginx and php.\r\n\r\n## Configuration\r\n\r\nConfiguration is done via a file named `composer.json` in the app's\r\nroot.\r\n\r\nA simple configuration could look like this:\r\n\r\n    {\r\n        \"require\": {\r\n            \"php\": \">=5.4.0\",\r\n            \"silex/silex\": \"~1.0@dev\"\r\n        },\r\n        \"extra\": {\r\n            \"heroku\": {\r\n                \"document-root\": \"web\",\r\n                \"index-document\": \"index.php\"\r\n            }\r\n        }\r\n    }\r\n\r\nThis configures an app with the document root set to the project's `web`\r\ndirectory, and sets that all requests should go through `web/index.php`\r\nwhich contains the application's front controller.\r\n\r\n### Configuration Directives\r\n\r\nThis buildpack supports configuration through directives placed in the `heroku`\r\nkey in the `extra` object.\r\n\r\n#### framework\r\n\r\n_Default: Null_\r\n\r\nUse a framework preset for configuration. Some configuration keys cannot\r\nbe overriden!\r\n\r\nAvailable presets:\r\n\r\n* `cakephp2`\r\n* `magento`\r\n* `silex` (needs `document-root` and `index-document` set)\r\n* `slim`\r\n* `symfony2`\r\n\r\nExample:\r\n\r\n    \"framework\": \"silex\"\r\n\r\n#### document-root\r\n\r\nDocument root relative to the app root. Defaults to the app root.\r\n\r\n    \"document-root\": \"web\"\r\n\r\n#### index-document\r\n\r\n_Default: \"index.php\"_\r\n\r\nIndex Document relative to the document root.\r\n\r\n    \"index-document\": \"app.php\"\r\n\r\n#### engines\r\n\r\nSet PHP and NGINX versions.\r\n\r\nTo launch the app with PHP 5.3.23 and NGINX 1.3.14:\r\n\r\n    \"engines\": {\r\n        \"php\": \"5.3.23\",\r\n        \"nginx\": \"1.3.14\"\r\n    }\r\n\r\nSet the version to \"default\" to use the current default version. The current\r\ndefault versions are NGINX `1.4.4` and PHP `5.5.10`.\r\n\r\nThe version identifiers can also include wildcards, e.g. `5.4.*`. At the\r\ntime of writing, PHP `5.4.26` would be used in this case. This also\r\nworks for NGINX.\r\n\r\nWhen a file named `.php-version` exists in the project root, then the\r\nPHP version is read from this file instead.\r\n\r\nSee also:\r\n\r\n* [Available NGINX Versions][]\r\n* [Available PHP Versions][]\r\n\r\n#### php-config\r\n\r\n_Default: []_\r\n\r\nAdd directives to the `php.ini`.\r\n\r\n    \"php-config\": [\r\n        \"display_errors=off\",\r\n        \"short_open_tag=on\"\r\n    ]\r\n\r\n#### php-includes\r\n\r\n_Default: []_\r\n\r\nInclude additional .ini files that should be parsed after the default php.ini. File paths\r\nare treated relative to the app root.\r\n\r\nExample:\r\n\r\n    \"php-includes\": [\"etc/php.ini\"]\r\n\r\n#### nginx-includes\r\n\r\n_Default: []_\r\n\r\nInclude additional config files into the NGINX configuration. Config\r\nfiles are included into the `server` scope and are loaded after the\r\nframework provided config. File paths are treated relative to the app\r\nroot.\r\n\r\nExample:\r\n\r\n    \"nginx-includes\": [\"etc/nginx.conf\"]\r\n\r\n#### compile\r\n\r\n_Default: []_\r\n\r\nRun console commands on slug compilation.\r\n\r\n    \"compile\": [\r\n        \"php app/console assetic:dump --env=prod --no-debug\"\r\n    ]\r\n\r\n_Note: pecl is not runnable this way._\r\n\r\n#### newrelic\r\n\r\n_Default: false_\r\n\r\nEnable instrumentation support via [New Relic](http://newrelic.com).\r\nIt's recommended to add the New Relic addon to your Heroku app, but you\r\ncan also set your license key manually by setting the `NEW_RELIC_LICENSE_KEY` config var via `heroku config:set`.\r\n\r\n    \"newrelic\": true\r\n\r\n#### log-files\r\n\r\n_Default: []_\r\n\r\nThe buildpack defines default log files by framework and some log files for php-fpm and nginx.\r\nAny file put in `log-files` will be be appended to the list.\r\nA tail on each unique log file will be run at application startup\r\n\r\n    \"log-files\": [\r\n        \"app/logs/rabbit-mq.log\",\r\n        \"vendor/nginx/stuff.log\"\r\n    ],\r\n\r\n\r\n## Node.Js\r\n\r\nIf your app contains a `package.json` node and its dependencies will be installed\r\n\r\nThe nodejs buildpack is based on the [heroku diet node.js buildpack](https://github.com/heroku/heroku-buildpack-nodejs/tree/diet).\r\nThis diet branch of the buildpack is intended to replace the official Node.js buildpack once it has been tested by some users.\r\n\r\nIt :\r\n- Uses the latest stable version of node and npm by default.\r\n- Allows any recent version of node to be used, including pre-release versions, as soon as they become available on [nodejs.org/dist](http://nodejs.org/dist/).\r\n- Uses the version of npm that comes bundled with node instead of downloading and compiling them separately. npm has been bundled with node since [v0.6.3 (Nov 2011)](http://blog.nodejs.org/2011/11/25/node-v0-6-3/). This effectively means that node versions `<0.6.3` are no longer supported, and that the `engines.npm` field in package.json is now ignored.\r\n- Makes use of an s3 caching proxy of nodejs.org for faster downloads of the node binaries.\r\n- Makes fewer HTTP requests when resolving node versions.\r\n- Uses an updated version of [node-semver](https://github.com/isaacs/node-semver) for dependency resolution.\r\n- No longer depends on SCONS.\r\n- Caches the `node_modules` directory across builds.\r\n- Runs `npm prune` after restoring cached modules, to ensure that any modules formerly used by your app aren't needlessly installed and/or compiled.\r\n\r\nA minimal `package.json` file with less will look like this :\r\n```json\r\n{\r\n    \"author\": \"Your Name\",\r\n    \"name\": \"App\",\r\n    \"dependencies\": {\r\n        \"less\": \">= 1.4.*\"\r\n    }\r\n}\r\n```\r\n\r\nNode and its modules will be available at compilation meaning you could process nodejs script at that time.\r\n\r\n\r\n## Contributing\r\n\r\nPlease see the [CONTRIBUTING](/CONTRIBUTING.md) file for all the\r\ndetails.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}